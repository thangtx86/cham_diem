<!DOCTYPE html>
<html>
    <head>
        <style>
            body {
                font-family: Arial, sans-serif;
            }
            .container {
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
            }
            .team {
                margin: 20px;
            }

            #redTeam {
                color: red;
            }

            #blueTeam {
                color: blue;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="team" id="redTeam">Red : 0</div>
            <div class="team" id="blueTeam">Blue: 0</div>
        </div>

        <script>
            let keyCombinations = [
                { keys: ['4', 'R', 'F', 'V'], score: 1, team: 'red' },
                { keys: ['1', 'Q', 'A', 'Z'], score: 2, team: 'red' },
                { keys: ['3', 'E', 'D', 'C'], score: 3, team: 'red' },
                { keys: ['7', 'U', 'J', 'M'], score: 1, team: 'blue' },
                { keys: ['2', 'W', 'S', 'X'], score: 2, team: 'blue' },
                { keys: ['8', 'I', 'K', ','], score: 3, team: 'blue' }
            ];

            let redTeamScore = 0;
            let blueTeamScore = 0;
            let pressedKeys = ['', '', '', ''];
            let delay = 2000;
            let maxPressedKeys = 4;

            let lastKeyPressTime = Date.now();

            function getFirstNCharacters(str, n) {
                if (str.length >= n) {
                    return str.substring(0, n);
                } else {
                    return str;
                }
            }
            function containsAllCharacters(chuoi1, chuoi2) {
                const charCount = {};

                for (const char of chuoi2) {
                    charCount[char] = (charCount[char] || 0) + 1;
                }

                for (const char of chuoi1) {
                    if (!charCount[char]) {
                        return false;
                    }
                    charCount[char]--;
                }

                return true;
            }

            function updateScore() {
                let currentTime = Date.now();
                let pressedKeysString;
                // console.log('P: ' + pressedKeys);
                if (currentTime - lastKeyPressTime <= delay) {
                    pressedKeysString = pressedKeys.join('');
                    console.log(pressedKeysString);
                    // console.log('--: ' + pressedKeys);
                    let finalKey = getFirstNCharacters(pressedKeysString, 4);
                    // console.log('----:' + finalKey);
                    for (let combination of keyCombinations) {
                        let combinationString = combination.keys.join('');
                        // console.log('+++' + combinationString);
                        if (pressedKeysString.includes(combinationString)) {
                            if (combination.team === 'red') {
                                redTeamScore += combination.score;
                                document.getElementById(
                                    'redTeam'
                                ).textContent = `Red Team Score: ${redTeamScore}`;
                            } else {
                                blueTeamScore += combination.score;
                                document.getElementById(
                                    'blueTeam'
                                ).textContent = `Blue Team Score: ${blueTeamScore}`;
                            }
                            // Reset pressedKeys after a match
                            pressedKeys = [];
                        }
                    }
                } else {
                    pressedKeysString = '';
                }
            }
            let keyCount = 0;
            let isTurnCompleted = true; // Bắt đầu với lượt mới
            let turnCount = 0; // Số lượt đã hoàn thành

            function updatePressedKeys(key) {
                key = key.toUpperCase();

                // Tìm xem key có tồn tại trong keyCombinations không
                const matchingCombination = keyCombinations.find(
                    (combination) => combination.keys.includes(key)
                );

                if (matchingCombination) {
                    // Tìm index của key trong keyCombinations
                    const index = matchingCombination.keys.indexOf(key);

                    // Lấy danh sách các phím trong keyCombinations
                    const keysToAppend = matchingCombination.keys.slice(index);

                    // Thêm các phím còn lại vào pressedKeys
                    for (const k of keysToAppend) {
                        if (!pressedKeys.includes(k)) {
                            pressedKeys.push(k);
                        }
                    }

                    // Hiển thị pressedKeys sau khi cập nhật
                    console.log(pressedKeys);
                    // updateScore();
                }
            }

            document.addEventListener('keydown', (event) => {
                const key = event.key.toUpperCase();
                if (/[0-9A-Z,]/.test(key)) {
                    let currentTime = Date.now();
                    if (currentTime - lastKeyPressTime > delay) {
                        pressedKeys = ['', '', '', '']; // Đặt lại mảng về trạng thái ban đầu nếu đã vượt quá thời gian delay
                        keyCount = 0; // Đặt lại số lượng phím đã nhập
                    }

                    if (keyCount < 2) {
                        // Thêm phím mới vào mảng
                        pressedKeys[keyCount] = key; // Sử dụng keyCount để xác định vị trí cần thay đổi
                        keyCount++;
                    } else {
                        // Sau khi đã nhập 2 phím, tìm kết hợp trong keyCombinations
                        const pressedKeyCombination = keyCombinations.find(
                            (combination) => {
                                return (
                                    combination.keys.includes(pressedKeys[0]) &&
                                    combination.keys.includes(pressedKeys[1])
                                );
                            }
                        );

                        if (pressedKeyCombination) {
                            // Nếu tìm thấy kết hợp, thay thế các phím trống bằng các phím còn lại trong kết hợp
                            for (let i = 2; i < pressedKeys.length; i++) {
                                if (pressedKeys[i] === '') {
                                    pressedKeys[i] =
                                        pressedKeyCombination.keys.find(
                                            (key) => !pressedKeys.includes(key)
                                        );
                                }
                            }
                        } else {
                            // Nếu không tìm thấy kết hợp, thêm '*' vào 2 phím còn lại
                            for (let i = 2; i < pressedKeys.length; i++) {
                                pressedKeys[i] = '*';
                            }
                        }
                    }
                    lastKeyPressTime = currentTime;
                    console.log(pressedKeys);
                    updateScore();
                }
            });
        </script>
    </body>
</html>
